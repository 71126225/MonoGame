// MonoGame - Copyright (C) The MonoGame Team
// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// This code is generated by a .tt template, don't modify it by hand.

using System;
using System.Runtime.InteropServices;
using System.Security;
using Microsoft.Xna.Framework;

namespace MonoGame.Framework
{
    static class MGNative
    {
        public const string Library = "/Users/harry/GitHub/MonoGame/MGNative/builddir/libmonogame.dylib";
        
        public static unsafe string GetString(IntPtr hglobal)
        {
            if (hglobal == IntPtr.Zero)
                return string.Empty;

            var ptr = (byte*)hglobal;
            while (*ptr != 0)
                ptr++;

            var ret = System.Text.Encoding.UTF8.GetString((byte*)hglobal, (int)(ptr - (byte*)hglobal));
            Marshal.FreeHGlobal(hglobal);
            
            return ret;
        }

        [DllImport(Library, EntryPoint = "MG_Initialize", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern GameRunBehavior Initialize();

        [DllImport(Library, EntryPoint = "MG_Update", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern bool Update(ref bool isActive);

        [DllImport(Library, EntryPoint = "MG_GetDisplayOrientation", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern DisplayOrientation GetDisplayOrientation();

        [DllImport(Library, EntryPoint = "MG_GetWindowHandle", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern IntPtr GetWindowHandle();

        [DllImport(Library, EntryPoint = "MG_GetWindowResizable", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern bool GetWindowResizable();

        [DllImport(Library, EntryPoint = "MG_SetWindowResizable", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern void SetWindowResizable(bool value);

        [DllImport(Library, EntryPoint = "MG_GetWindowClientBounds", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern Rectangle GetWindowClientBounds();

        [DllImport(Library, EntryPoint = "MG_GetWindowPosition", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern Point GetWindowPosition();

        [DllImport(Library, EntryPoint = "MG_SetWindowPosition", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern void SetWindowPosition(Point position);

        public static string GetWindowTitle()
        {
            return GetString(MG_GetWindowTitle());
        }

        [DllImport(Library, EntryPoint = "MG_GetWindowTitle", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        private static extern IntPtr MG_GetWindowTitle();

        [DllImport(Library, EntryPoint = "MG_SetWindowTitle", CharSet = CharSet.Ansi), SuppressUnmanagedCodeSecurity]
        public static extern void SetWindowTitle(string title);
    }
}
